<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Tomcat连接Oracle数据库报错Connections could not be acquired from the underlying database</title>
    <link href="/posts/072954014480.html"/>
    <url>/posts/072954014480.html</url>
    
    <content type="html"><![CDATA[<h2 id="一、故障现象"><a href="#一、故障现象" class="headerlink" title="一、故障现象"></a>一、故障现象</h2><blockquote><p>周一上班，有用户反馈系统登录不上，据说这套系统运行2年一直没问题，突然就访问不了。因为这个系统之前一直都不是我在维护，因此不是很熟悉这个系统，但是还是答应帮忙看了一下。</p></blockquote><p>服务器运行的是tomcat7，查看日志，比较明显的错误信息有下面两条：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">Could not get JDBC Connection; nested exception is java.sql.SQLException: Connections could not be acquired from the underlying database!<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs log">java.sql.SQLException: The Network Adapter could not establish the connection<br></code></pre></td></tr></table></figure><h2 id="二、分析排查"><a href="#二、分析排查" class="headerlink" title="二、分析排查"></a>二、分析排查</h2><p>通过前面的tomcat错误日志，可以初步判断是数据库连接出现了问题，接下来去查看数据库的情况。</p><p>经过了解，tomcat连接的是本机的oracle数据库，版本为oracle 11g，查看监听状态：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">lsnrctl status<br></code></pre></td></tr></table></figure><p>命令执行完，未发现异常，接下来检查Oracle数据库的网络连接配置和诊断网络连接问题</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">tnsping orcl<br></code></pre></td></tr></table></figure><p>以上命令执行了多次发现只有一两次结果正常，而且延迟很大，超过1000ms，由此基本可以确定为数据库网络连接出现了问题。</p><p>然后继续去看listener的日志文件，发现日志文件大小居然超过2GB，费了很大劲打开了日志文件，频繁出现下面的错误信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs log">Fatal NI connect error 12537, connecting to:<br> (LOCAL=NO)<br>  VERSION INFORMATION:<br>    TNS for 64-bit Windows: Version 11.2.0.1.0 - Production<br>    Oracle Bequeath NT Protocol Adapter for 64-bit Windows: Version 11.2.0.1.0 - Production<br>    Windows NT TCP/IP NT Protocol Adapter for 64-bit Windows: Version 11.2.0.1.0 - Production<br>  Time: 29-7月 -2024 08:25:19<br>  Tracing not turned on.<br>  Tns error struct:<br>    ns main err code: 12537<br>TNS-12537: TNS: 连接关闭<br>    ns secondary err code: 12560<br>    nt main err code: 0<br>    nt secondary err code: 0<br>    nt OS err code: 0<br></code></pre></td></tr></table></figure><h2 id="三、问题解决"><a href="#三、问题解决" class="headerlink" title="三、问题解决"></a>三、问题解决</h2><p>参考<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="Doc ID 739530.1  How to delete or refresh/recycle a SQL*Net Listener log file while the Listener is active">[1]</span></a></sup>的说法，<code>listener.log</code>日志大小不能超过2GB（有些平台是4GB），否则会导致<code>LISTENER</code>监听器无法处理新的连接，问题原因终于找到了，那么接下来就是解决问题了。</p><h3 id="3-1-首先关闭日志"><a href="#3-1-首先关闭日志" class="headerlink" title="3.1 首先关闭日志"></a>3.1 首先关闭日志</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">lsnrctl <span class="hljs-built_in">set</span> log_status off<br></code></pre></td></tr></table></figure><h3 id="3-2-清空日志"><a href="#3-2-清空日志" class="headerlink" title="3.2 清空日志"></a>3.2 清空日志</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">cls</span> &gt; listener.log<br></code></pre></td></tr></table></figure><h3 id="3-3-打开日志"><a href="#3-3-打开日志" class="headerlink" title="3.3 打开日志"></a>3.3 打开日志</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">lsnrctl <span class="hljs-built_in">set</span> log_status on<br></code></pre></td></tr></table></figure><h3 id="3-4-重新加载监听"><a href="#3-4-重新加载监听" class="headerlink" title="3.4 重新加载监听"></a>3.4 重新加载监听</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">lsnrctl reload<br></code></pre></td></tr></table></figure><p>执行完上面一系列操作，数据库连接终于恢复了正常，此时执行<code>tnsping</code>命令，返回几乎就是0毫秒，业务系统访问也没有问题了。</p><p>以上是针对Windows下的操作，对于Linux系统差不多类似。</p><h2 id="四、参考"><a href="#四、参考" class="headerlink" title="四、参考"></a>四、参考</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>Doc ID 739530.1  How to delete or refresh&#x2F;recycle a SQL*Net Listener log file while the Listener is active<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oom-killer引起的一次k8s worker节点宕机事件</title>
    <link href="/posts/072779145e3f.html"/>
    <url>/posts/072779145e3f.html</url>
    
    <content type="html"><![CDATA[<blockquote><p>今天上班，同事反馈业务系统访问不了，排查下来发现k8s一个worker节点挂掉了，而且ssh还远程不上，无奈只能强制重启，查看日志信息如下：</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Jul</span> <span class="hljs-number">27</span> <span class="hljs-number">08</span>:<span class="hljs-number">54</span>:<span class="hljs-number">15</span> k8s-worker02 kernel: agent invoked oom-killer: gfp_mask=<span class="hljs-number">0</span>x201da, order=<span class="hljs-number">0</span>, oom_score_adj=<span class="hljs-number">1000</span><br><span class="hljs-attribute">Jul</span> <span class="hljs-number">27</span> <span class="hljs-number">08</span>:<span class="hljs-number">54</span>:<span class="hljs-number">17</span> k8s-worker02 kernel: agent cpuset=bfabbea08d8f02561adc88889f407a9f7b3efcc0e3fa6ad441456cf846bc3c57 mems_allowed=<span class="hljs-number">0</span><br><span class="hljs-attribute">Jul</span> <span class="hljs-number">27</span> <span class="hljs-number">08</span>:<span class="hljs-number">54</span>:<span class="hljs-number">20</span> k8s-worker02 kernel: CPU: <span class="hljs-number">7</span> PID: <span class="hljs-number">5495</span> Comm: agent Kdump: loaded Tainted: G               ------------ T <span class="hljs-number">3</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">1160</span>.<span class="hljs-number">59</span>.<span class="hljs-number">1</span>.el7.x86_64 #<span class="hljs-number">1</span><br><span class="hljs-attribute">Jul</span> <span class="hljs-number">27</span> <span class="hljs-number">08</span>:<span class="hljs-number">54</span>:<span class="hljs-number">22</span> k8s-worker02 kernel: Hardware name: Nutanix AHV, BIOS <span class="hljs-number">1</span>.<span class="hljs-number">11</span>.<span class="hljs-number">0</span>-<span class="hljs-number">2</span>.el7 <span class="hljs-number">04</span>/<span class="hljs-number">01</span>/<span class="hljs-number">2014</span><br><span class="hljs-attribute">Jul</span> <span class="hljs-number">27</span> <span class="hljs-number">08</span>:<span class="hljs-number">54</span>:<span class="hljs-number">25</span> k8s-worker02 kernel: Call Trace:<br><span class="hljs-attribute">Jul</span> <span class="hljs-number">27</span> <span class="hljs-number">08</span>:<span class="hljs-number">54</span>:<span class="hljs-number">31</span> k8s-worker02 kernel:<span class="hljs-meta"> [&lt;ffffffff91d865b9&gt;] dump_stack+0x19/0x1b</span><br><span class="hljs-meta">Jul 27 08:54:38 k8s-worker02 kernel: [&lt;ffffffff91d81658&gt;] dump_header+0x90/0x229</span><br><span class="hljs-meta">Jul 27 08:54:44 k8s-worker02 kernel: [&lt;ffffffff91706992&gt;] ? ktime_get_ts64+0x52/0xf0</span><br><span class="hljs-meta">Jul 27 08:54:50 k8s-worker02 kernel: [&lt;ffffffff9175e01f&gt;] ? delayacct_end+0x8f/0xb0</span><br><span class="hljs-meta">Jul 27 08:54:59 k8s-worker02 kernel: [&lt;ffffffff917c254d&gt;] oom_kill_process+0x2cd/0x490</span><br><span class="hljs-meta">Jul 27 08:55:07 k8s-worker02 kernel: [&lt;ffffffff917c1f3d&gt;] ? oom_unkillable_task+0xcd/0x120</span><br><span class="hljs-meta">Jul 27 08:55:23 k8s-worker02 kernel: [&lt;ffffffff917c2c3a&gt;] out_of_memory+0x31a/0x500</span><br><span class="hljs-meta">Jul 27 08:55:36 k8s-worker02 kernel: [&lt;ffffffff917c9854&gt;] __alloc_pages_nodemask+0xad4/0xbe0</span><br><span class="hljs-meta">Jul 27 08:55:49 k8s-worker02 kernel: [&lt;ffffffff918193b8&gt;] alloc_pages_current+0x98/0x110</span><br><span class="hljs-meta">Jul 27 08:56:07 k8s-worker02 kernel: [&lt;ffffffff917be007&gt;] __page_cache_alloc+0x97/0xb0</span><br><span class="hljs-meta">Jul 27 08:56:23 k8s-worker02 kernel: [&lt;ffffffff917c0fa0&gt;] filemap_fault+0x270/0x420</span><br><span class="hljs-meta">Jul 27 08:56:41 k8s-worker02 kernel: [&lt;ffffffffc03f691e&gt;] __xfs_filemap_fault+0x7e/0x1d0 [xfs]</span><br><span class="hljs-attribute">Jul</span> <span class="hljs-number">27</span> <span class="hljs-number">08</span>:<span class="hljs-number">55</span>:<span class="hljs-number">23</span> k8s-worker02 kernel:<span class="hljs-meta"> [&lt;ffffffff917c2c3a&gt;] out_of_memory+0x31a/0x500</span><br><span class="hljs-meta">Jul 27 08:55:36 k8s-worker02 kernel: [&lt;ffffffff917c9854&gt;] __alloc_pages_nodemask+0xad4/0xbe0</span><br><span class="hljs-meta">Jul 27 08:55:49 k8s-worker02 kernel: [&lt;ffffffff918193b8&gt;] alloc_pages_current+0x98/0x110</span><br><span class="hljs-meta">Jul 27 08:56:07 k8s-worker02 kernel: [&lt;ffffffff917be007&gt;] __page_cache_alloc+0x97/0xb0</span><br><span class="hljs-meta">Jul 27 08:56:23 k8s-worker02 kernel: [&lt;ffffffff917c0fa0&gt;] filemap_fault+0x270/0x420</span><br><span class="hljs-meta">Jul 27 08:56:41 k8s-worker02 kernel: [&lt;ffffffffc03f691e&gt;] __xfs_filemap_fault+0x7e/0x1d0 [xfs]</span><br></code></pre></td></tr></table></figure><p>其中agent invoked oom-killer: gfp_mask&#x3D;0x201da, order&#x3D;0, oom_score_adj&#x3D;1000这一条很醒目，服务器OOM了。因为Kubernetes官方不推荐使用SWAP分区，而且正常情况下服务器的内存是完全足够的，因此便只能对每个POD限制资源了，为容器配置适当的资源请求和限制。这有助于确保每个容器获得足够的内存，并避免单个容器过度消耗节点资源。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">resources:</span><br>  <span class="hljs-attr">requests:</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br>  <span class="hljs-attr">limits:</span><br>    <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;1Gi&quot;</span><br></code></pre></td></tr></table></figure><p>当然在非生产环境可以启用SWAP分区，虽然会对系统性能上有所影响，但是不至于引起OOM，导致服务不能访问的情况。</p><ol><li>增加交换空间可以在物理内存不足时提供额外的虚拟内存。使用 <code>swapon -s</code> 检查当前交换空间，并根据需要调整：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> fallocate -l 4G /swapfile<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">chmod</span> 600 /swapfile<br><span class="hljs-built_in">sudo</span> mkswap /swapfile<br><span class="hljs-built_in">sudo</span> swapon /swapfile<br></code></pre></td></tr></table></figure><ol start="2"><li>确保在 <code>/etc/fstab</code> 中配置持久化交换空间：</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">/swapfile <span class="hljs-built_in">none</span> swap sw <span class="hljs-number">0</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>除此之外，还可以调整内核参数来改变<code>OOM killer</code> 的行为，避免系统在那里不停的杀进程。比如我们可以在触发 OOM 后立刻触发 kernel panic，kernel panic 10秒后自动重启系统：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;vm.panic_on_oom=1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;kernel.panic=10&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br></code></pre></td></tr></table></figure><p>修改 <code>oom_score_adj</code> 的值以调整 <code>OOM killer</code>的行为。增加 <code>oom_score_adj</code> 值将增加进程被杀死的可能性，降低则减少：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> -1000 &gt; /proc/&lt;pid&gt;/oom_score_adj<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>计算机知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BookStack不能导出pdf-Running as root without --no-sandbox is not supported</title>
    <link href="/posts/0726ad0f1ede.html"/>
    <url>/posts/0726ad0f1ede.html</url>
    
    <content type="html"><![CDATA[<p>安装完BookStack后，尝试着导出电子文档，发现除了PDF文档导出不了，EPUB文档和MOBI文档导出都很正常。</p><p>查看日志信息报错如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ERROR:zygote_host_impl_linux.<span class="hljs-keyword">cc</span>(<span class="hljs-number">100</span>)] Running <span class="hljs-keyword">as</span> root without --<span class="hljs-keyword">no</span>-<span class="hljs-keyword">sandbox</span> <span class="hljs-keyword">is</span> not supported. See https://crbug.<span class="hljs-keyword">com</span>/<span class="hljs-number">638180</span><br></code></pre></td></tr></table></figure><p>原来是chromium 不支持以 root 用户身份运行，除非使用 --no-sandbox 参数</p><p>因此需要编辑配置文件&#x2F;etc&#x2F;supervisor&#x2F;conf.d&#x2F;bookstack.conf，添加QTWEBENGINE_DISABLE_SANDBOX&#x3D;1这个参数，</p><p>完整配置如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[program:BookStack]</span><br><span class="hljs-attr">directory</span> = /opt/BookStack<br><span class="hljs-attr">command</span> =/opt/BookStack/BookStack<br><span class="hljs-attr">autostart</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">user</span> = root<br><span class="hljs-attr">redirect_stderr</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">stdout_logfile</span> = /var/log/supervisor/BookStack.log<br><span class="hljs-attr">environment</span>=QTWEBENGINE_DISABLE_SANDBOX=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>配置完成后，重启服务</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">supervisorctl reload</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/posts/072216107.html"/>
    <url>/posts/072216107.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
